# docker-compose.yml

version: '3.8'

services:
  # Сервіс бази даних PostgreSQL
  db:
    image: postgres:13-alpine # Використовуємо готовий образ Postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data/ # Зберігаємо дані, щоб вони не зникали
    environment:
      - POSTGRES_USER=hello_django
      - POSTGRES_PASSWORD=hello_django
      - POSTGRES_DB=hello_django_dev
    ports:
      - "5432:5432" # Прокидаємо порт, щоб можна було підключитись до БД з комп'ютера

  # Ваш існуючий сервіс Redis
  redis:
    image: redis:alpine # Використовуємо готовий образ Redis
    ports:
      - "6380:6379" # Прокидаємо порт Redis

  # Сервіс вашого Django-проєкту
  web:
    build: . # Кажемо Docker зібрати образ з Dockerfile у поточній папці
    command: python manage.py runserver 0.0.0.0:8000 # Команда для запуску сервера
    volumes:
      - .:/app # Синхронізуємо код з контейнером, щоб зміни одразу застосовувались
    ports:
      - "8000:8000" # Прокидаємо порт 8000
    environment:
      - POSTGRES_NAME=hello_django_dev
      - POSTGRES_USER=hello_django
      - POSTGRES_PASSWORD=hello_django
    depends_on: # Вказуємо, що наш проєкт залежить від бази даних
      - db

volumes:
  postgres_data: # Оголошуємо том для зберігання даних БД