from django.shortcuts import render,redirect,get_object_or_404
from .forms import RegistrationForm
from django.utils.html import escape
from django.contrib.auth import login
from django.urls import reverse
from .forms import AdForm
from django.contrib.auth.decorators import login_required
from .models import AD,Profile
from django.core.mail import send_mail
from django.conf import settings
from .forms import OrderForm,PasswordResetForm,AdImageFormSet
from django.utils.http import urlsafe_base64_encode
from django.contrib.auth.tokens import default_token_generator
from django.utils.encoding import force_bytes
from django.contrib.auth.models import User
from django.http import HttpResponseForbidden,HttpResponse,HttpResponseBadRequest
from django.http import JsonResponse
from django.contrib.auth.forms import UserCreationForm
from django import forms
from django.contrib.auth import get_user_model, update_session_auth_hash
from django.utils.http import urlsafe_base64_decode
from django.shortcuts import render, redirect
from django.contrib.auth.forms import SetPasswordForm
from django.contrib import messages
from .forms import ProfileForm
# Create your views here.
def home(request):
    ads = AD.objects.all()
    return render(request, 'main/index.html',{'ads': ads})


def register(request):
    if request.method == 'POST':
        form = RegistrationForm(request.POST)

        if form.is_valid():
            user = form.save()
            login(request, user)
            return redirect('home')  # —è–∫—â–æ —É—Å–ø—ñ—à–Ω–æ ‚Äî –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è

        # —è–∫—â–æ —Ñ–æ—Ä–º–∞ –Ω–µ–≤–∞–ª—ñ–¥–Ω–∞ ‚Äî –∑–∞–ª–∏—à–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
        # —ñ Django —Å–∞–º –ø–µ—Ä–µ–¥–∞—Å—Ç—å –ø–æ–º–∏–ª–∫–∏ —É —Ñ–æ—Ä–º—É
        else:
            print(form.errors)  # –¥–ª—è –¥–µ–±–∞–≥—É (–ø–æ—Ç—ñ–º –º–æ–∂–Ω–∞ –≤–∏–¥–∞–ª–∏—Ç–∏)
    else:
        form = RegistrationForm()

    return render(request, 'registration/register.html', {'form': form})


def listing_detail(request,):
    ads = AD.objects.all()
    return render(request, "myapp/listing_detail.html", {"ads": ads})

def ad_detail(request, slug):
    ad = get_object_or_404(AD, slug=slug)
    images=ad.images.all()
    return render(request, "myapp/ad_detail.html", {"ad": ad})
@login_required
def favorite_ads(request):
    ads = request.user.favorite_ads.all()  # —á–µ—Ä–µ–∑ many-to-many
    return render(request, 'myapp/favorite_ads.html', {'ads': ads})
def order_ad(request, ad_id):
    ad = AD.objects.get(pk=ad_id)

    if request.method == "POST":
        form = OrderForm(request.POST)
        if form.is_valid():
            name = form.cleaned_data["name"]
            email = form.cleaned_data["email"]
            phone = form.cleaned_data["phone"]

            subject = f"–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è: {ad.title}"

            message = (
                f"–î–µ—Ç–∞–ª—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n\n"
                f"–û–≥–æ–ª–æ—à–µ–Ω–Ω—è: {ad.title}\n"
                f"–¶—ñ–Ω–∞: {ad.price}\n\n"
                f"–Ü–º‚Äô—è: {name}\n"
                f"Email: {email}\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
            )

            # –∞–¥—Ä–µ—Å–∏ –æ–¥–µ—Ä–∂—É–≤–∞—á—ñ–≤ ‚Äî –ø–æ–∫—É–ø–µ—Ü—å —ñ –ø—Ä–æ–¥–∞–≤–µ—Ü—å
            recipients = [email]
            if hasattr(ad, "user") and ad.user.email:
                recipients.append(ad.user.email)

            send_mail(subject, message, settings.DEFAULT_FROM_EMAIL, recipients)

            return render(request, "myapp/order_success.html", {"ad": ad})

    else:
        form = OrderForm()

    return render(request, "myapp/order_form.html", {"form": form, "ad": ad})


def password_reset(request):
    if request.method == "POST":
        form = PasswordResetForm(request.POST)
        if form.is_valid():
            email = form.cleaned_data['email']
            user_queryset = User.objects.filter(email=email)

            if user_queryset.exists():
                user = user_queryset.first()

                # 1. –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ–º—É —Ç–∞ —Ç—ñ–ª–æ –ª–∏—Å—Ç–∞
                subject = "–ü–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è —Å–∫–∏–¥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è"

                # 2. –ì–µ–Ω–µ—Ä—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ —á–∞—Å—Ç–∏–Ω–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
                uid = urlsafe_base64_encode(force_bytes(user.pk))
                token = default_token_generator.make_token(user)

                # 3. –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ–≤–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
                reset_link = request.build_absolute_uri(
                    reverse('password_reset_confirm', kwargs={'uidb64': uid, 'token': token})
                )

                message = f"–ü—Ä–∏–≤—ñ—Ç, {user.username}!\n\n" \
                          f"–ü–µ—Ä–µ–π–¥—ñ—Ç—å –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º, —â–æ–± —Å–∫–∏–Ω—É—Ç–∏ –≤–∞—à –ø–∞—Ä–æ–ª—å:\n" \
                          f"{reset_link}\n\n" \
                          f"–Ø–∫—â–æ –≤–∏ –Ω–µ —Ä–æ–±–∏–ª–∏ —Ü–µ–π –∑–∞–ø–∏—Ç, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ—ñ–≥–Ω–æ—Ä—É–π—Ç–µ —Ü–µ–π –ª–∏—Å—Ç."

                # 4. –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ª–∏—Å—Ç
                send_mail(
                    subject,
                    message,
                    "noreply@mywebsite.com",
                    [user.email]
                )

            return redirect('password_reset_done')

    else:
        form = PasswordResetForm()

    return render(request, 'registration/password_reset_form.html', {'form': form})


def password_reset_done_view(request):
    """–°—Ç–æ—Ä—ñ–Ω–∫–∞, —è–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª—è—î, —â–æ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ."""
    return render(request, 'registration/password_reset_done.html')


def password_reset_confirm_view(request, uidb64, token):
    UserModel = get_user_model()
    try:
        uid = urlsafe_base64_decode(uidb64).decode()
        user = UserModel.objects.get(pk=uid)
    except (TypeError, ValueError, OverflowError, UserModel.DoesNotExist):
        user = None

    if user is not None and default_token_generator.check_token(user, token):
        validlink = True
        if request.method == 'POST':
            form = SetPasswordForm(user, request.POST)
            if form.is_valid():
                form.save()
                update_session_auth_hash(request, user)  # —â–æ–± –Ω–µ –≤–∏–ª–æ–≥—ñ–Ω—é–≤–∞–ª–æ –ø—ñ—Å–ª—è –∑–º—ñ–Ω–∏
                messages.success(request, "–ü–∞—Ä–æ–ª—å —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ! –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ —É–≤—ñ–π—Ç–∏.")
                return redirect('login')
        else:
            form = SetPasswordForm(user)
    else:
        validlink = False
        form = None

    return render(request, 'registration/password_reset_confirm.html', {
        'form': form,
        'validlink': validlink
    })

@login_required
def user_profile(request):
    try:
        user_ads = AD.objects.filter(user=request.user).order_by('-date')
    except AttributeError:
        # –¶–µ –ø—Ä–æ—Å—Ç–æ –∑–∞–≥–æ—Ç–æ–≤–∫–∞ –Ω–∞ –≤–∏–ø–∞–¥–æ–∫, —è–∫—â–æ –ø–æ–ª–µ –Ω–∞–∑–∏–≤–∞—î—Ç—å—Å—è —ñ–Ω–∞–∫—à–µ
        # –°–ø—Ä–æ–±—É–π—Ç–µ 'user' –∞–±–æ –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ models.py
        user_ads = AD.objects.filter(user=request.user).order_by('-created_at')



    context = {
        'user_ads': user_ads
    }
    return render(request, 'myapp/profile.html', context)


# KEEP THIS FUNCTION
@login_required
def ad_create(request):
    if request.method == 'POST':
        form = AdForm(request.POST)
        formset = AdImageFormSet(request.POST, request.FILES)

        if form.is_valid() and formset.is_valid():
            ad = form.save(commit=False)
            ad.user = request.user
            ad.save()  # ‚¨ÖÔ∏è –¢—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å—Ç–≤–æ—Ä—é—î—Ç—å—Å—è slug —É –º–æ–¥–µ–ª—ñ!
            ad.refresh_from_db()
            formset.instance = ad
            formset.save()

              # üß† –û–Ω–æ–≤–ª—é—î slug –ø—ñ—Å–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
            return redirect('ad_detail', slug=ad.slug)

        else:
            print("Form errors:", form.errors)
            print("Formset errors:", formset.errors)
            print("Non-form errors:", formset.non_form_errors())

    else:
        form = AdForm()
        formset = AdImageFormSet()

    return render(request, 'myapp/ad_form.html', {'form': form, 'formset': formset})


@login_required
def ad_deactivate(request, slug):
    ad = get_object_or_404(AD, slug=slug)

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î –∞–≤—Ç–æ—Ä–æ–º
    if request.user != ad.user:
        return HttpResponseForbidden("–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –¥–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ —á—É–∂–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è.")

    if request.method == 'POST':
        ad.delete() # –ù–∞–π–ø—Ä–æ—Å—Ç—ñ—à–∏–π —Å–ø–æ—Å—ñ–± "–¥–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏"
        return redirect('profile') # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –ø—Ä–æ—Ñ—ñ–ª—é

    # –Ø–∫—â–æ —Ö—Ç–æ—Å—å –∑–∞–π—à–æ–≤ GET-–∑–∞–ø–∏—Ç–æ–º, –Ω—ñ—á–æ–≥–æ –Ω–µ —Ä–æ–±–∏–º–æ
    return redirect('ad_detail', slug=ad.slug)

@login_required
def ad_edit(request, slug):
    ad = get_object_or_404(AD, slug=slug)

    # ‚ùó –ó–∞—Ö–∏—Å—Ç ‚Äî —Ç—ñ–ª—å–∫–∏ –≤–ª–∞—Å–Ω–∏–∫ –º–æ–∂–µ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏
    if ad.user != request.user:
        return redirect('ad_detail', slug=slug)  # ‚Üê –±–µ–∑ 'myapp/' !!!

    if request.method == 'POST':
        form = AdForm(request.POST, request.FILES, instance=ad)
        formset = AdImageFormSet(request.POST, request.FILES, instance=ad)
        if form.is_valid():
            form.save()
            formset.save()
            return redirect('ad_detail', slug=ad.slug)  # ‚Üê –±–µ–∑ 'myapp/' !!!
    else:
        form = AdForm(instance=ad)
        formset = AdImageFormSet(instance=ad)

    return render(request, 'myapp/ad_form.html', {
        'form': form,
        'formset': formset,
        'is_edit': True,  # üß© –¥–æ–¥–∞—Ç–∫–æ–≤–∏–π –ø—Ä–∞–ø–æ—Ä–µ—Ü—å, —â–æ–± —à–∞–±–ª–æ–Ω –∑–Ω–∞–≤, —â–æ —Ü–µ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
        'ad': ad
    })
class CustomUserCreationForm(UserCreationForm):
    email = forms.EmailField(required=True)

def validate_field(request):
    field = request.POST.get("field")
    value = request.POST.get("value")

    form = CustomUserCreationForm({field: value})
    form.is_valid()  # –ó–∞–ø—É—Å–∫–∞—î–º–æ –≤–∞–ª—ñ–¥–∞—Ü—ñ—é

    errors = form.errors.get(field)
    if errors:
        return JsonResponse({"valid": False, "errors": errors})
    return JsonResponse({"valid": True})

@login_required
def toggle_favorite(request, slug):
    ad = get_object_or_404(AD, slug=slug)
    user = request.user

    if user == ad.user:
        return JsonResponse({'success': False, 'error': '–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–ø–æ–¥–æ–±–∞—Ç–∏ –≤–ª–∞—Å–Ω–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è'})

    if ad.favorites.filter(id=user.id).exists():
        ad.favorites.remove(user)
        is_favorite = False
    else:
        ad.favorites.add(user)
        is_favorite = True

    favorite_count = user.favorite_ads.count()

    return JsonResponse({
        'success': True,
        'is_favorite': is_favorite,
        'favorite_count': favorite_count
    })
@login_required
def edit_profile(request):
    profile = request.user.profile
    if request.method == 'POST':
        form = ProfileForm(request.POST, request.FILES, instance=profile)
        if form.is_valid():
            form.save()
            messages.success(request, "–ü—Ä–æ—Ñ—ñ–ª—å –æ–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ")
            return redirect('edit_profile')
    else:
        form = ProfileForm(instance=profile)

    return render(request, 'myapp/edit_profile.html', {'form': form})


@login_required
def my_profile(request):
    profile, created = Profile.objects.get_or_create(user=request.user)
    user_ads = AD.objects.filter(user=request.user).order_by('-date')

    return render(request, 'myapp/my_profile.html', {
        'profile': profile,
        'ads': user_ads
    })